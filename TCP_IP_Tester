import socket
import threading
import time
import sys
import select

# Tinker Board Server settings
TINKER_BOARD_IP = "0.0.0.0"  # IP address of the server (listening on all interfaces)
TINKER_BOARD_PORT = 5000      # Port to listen on

# Simulated OCR result (for manual testing)
ocr_result = "A1234567890"  # Example OCR result
stable_text_lock = threading.Lock()
stable_text = ocr_result

# Store the connection globally so we can send data manually
plc_connection = None
plc_address = None
plc_connected = False

# Function to handle the PLC connection
def handle_plc_connection(conn, addr):
    global plc_connection, plc_address, plc_connected
    plc_connection = conn
    plc_address = addr
    plc_connected = True
    print(f"Connection established with {addr}")
    try:
        while True:
            # Receive the trigger signal from PLC
            data = conn.recv(1024)
            if data:
                print(f"Received trigger from PLC: {data.decode()}")
                # Simulate OCR processing delay
                time.sleep(2)
                # Send back the OCR result
                with stable_text_lock:
                    response = stable_text.encode()  # Simulate sending the latest OCR result
                conn.sendall(response)
                print(f"Sent OCR result: {response.decode()}")
            else:
                print(f"Connection closed by PLC: {addr}")
                break
    except ConnectionResetError:
        print(f"Connection lost with PLC: {addr}")
    finally:
        plc_connected = False
        plc_connection = None
        plc_address = None

# TCP Server to listen for PLC triggers
def tinker_board_server():
    global plc_connection, plc_address, plc_connected

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((TINKER_BOARD_IP, TINKER_BOARD_PORT))
        server_socket.listen(1)
        print(f"Tinker Board server listening on {TINKER_BOARD_IP}:{TINKER_BOARD_PORT}...")

        while True:
            conn, addr = server_socket.accept()
            threading.Thread(target=handle_plc_connection, args=(conn, addr)).start()

# Function to manually send OCR result when "c" is pressed
def manual_ocr_sender():
    global plc_connection, plc_connected

    print("Press 'c' to manually send the OCR result to the connected PLC.")

    while True:
        # Use select to listen for keyboard input (non-blocking)
        if sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
            user_input = sys.stdin.read(1)
            if user_input == 'c':
                if plc_connected and plc_connection:
                    with stable_text_lock:
                        response = stable_text.encode()  # Simulate sending the latest OCR result
                    try:
                        plc_connection.sendall(response)
                        print(f"Manually sent OCR result: {response.decode()} to PLC: {plc_address}")
                    except BrokenPipeError:
                        print("Error: Connection to PLC lost. Unable to send OCR result.")
                else:
                    print("No PLC connected. Unable to send OCR result.")

# Start both the server and the manual sender in different threads
if __name__ == "__main__":
    # Start the server in a separate thread
    server_thread = threading.Thread(target=tinker_board_server, daemon=True)
    server_thread.start()

    # Start the manual OCR sender loop
    manual_ocr_sender()
