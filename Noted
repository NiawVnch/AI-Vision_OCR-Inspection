import cv2
import pytesseract
import csv
import os
import re
import numpy as np
import socket
from collections import deque
import threading
import time

# Set the mode
real_time_mode = True
# real_time_mode = False

# Specify the path to the image file
image_path = "GrayCO2.JPEG"

OCR = True
# OCR = False

# Initialize the camera (only used in real-time mode)
if real_time_mode:
    cap = cv2.VideoCapture(5)

    # Set the frame rate
    fps = 25  # Desired frame rate (fps)
    cap.set(cv2.CAP_PROP_FPS, fps)

# Define the target string and expected pattern (A followed by digits)
expected_pattern = r'A\d{10}'  # Matches 'A' followed by exactly 10 digits
detected_text_history = deque(maxlen=10)  # Keep track of previous OCR results

# TCP/IP server settings for PLC trigger
PLC_IP = "0.0.0.0"  # The server IP address (0.0.0.0 listens to all interfaces)
PLC_PORT = 5000      # The port to listen to PLC signals
plc_trigger_received = False  # Flag for when PLC sends a trigger

# OCR thread-related variables
ocr_thread_running = False
ocr_result = ""
ocr_frame_queue = deque(maxlen=1)  # Queue to store the latest frame for OCR
ocr_thread_lock = threading.Lock()

# Function to start the TCP/IP server and listen for PLC trigger
def plc_server():
    global plc_trigger_received
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((PLC_IP, PLC_PORT))
        server_socket.listen(1)
        print(f"Listening for PLC trigger on {PLC_IP}:{PLC_PORT}...")

        while True:
            conn, addr = server_socket.accept()
            with conn:
                print(f"Connection from {addr}")
                data = conn.recv(1024)
                if data:
                    print("PLC trigger received!")
                    plc_trigger_received = True
                    conn.sendall(b'Trigger received')  # Send acknowledgment

# Function to save parameters to a CSV file
def save_parameters():
    # Get current positions of trackbars
    block_size = cv2.getTrackbarPos('Block Size', 'OCR Real-time Threshold Video')
    c = cv2.getTrackbarPos('C', 'OCR Real-time Threshold Video')
    blur_kernel_size = cv2.getTrackbarPos('Blur Kernel Size', 'OCR Real-time Threshold Video')
    morph_kernel_size = cv2.getTrackbarPos('Morph Kernel Size', 'OCR Real-time Threshold Video')
    threshold_type = cv2.getTrackbarPos('Threshold Type', 'OCR Real-time Threshold Video')

    # Save the parameters to a CSV file
    with open('parameters.csv', mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Crop Coordinate', 'Block Size', 'C', 'Blur Kernel Size', 'Morph Kernel Size', 'Threshold Type'])
        writer.writerow([str(crop_coords), block_size, c, blur_kernel_size, morph_kernel_size, threshold_type])

# Function to load parameters from a CSV file
def load_parameters():
    if os.path.exists('parameters.csv'):
        with open('parameters.csv', mode='r') as file:
            reader = csv.reader(file)
            next(reader)  # Skip header
            params = next(reader)
            crop_coords = eval(params[0])  # Evaluate the string as a tuple
            print(f"Loaded parameters: {params}")  # Debugging statement
            return crop_coords, int(params[1]), int(params[2]), int(params[3]), int(params[4]), int(params[5])
    print("Loading default parameters...")  # Debugging statement
    return (100, 100, 200, 200), 11, 2, 5, 3, 0  # Default values

# Load parameters before creating trackbars
crop_coords, block_size, c, blur_kernel_size, morph_kernel_size, threshold_type = load_parameters()

# Callback function to update and save parameters when a trackbar is adjusted
def update_and_save(val):
    save_parameters()  # Save parameters when a trackbar is updated

# Create a window
cv2.namedWindow('OCR Real-time Threshold Video')

# Create trackbars for block size, constant, and GaussianBlur and morphology kernel sizes
cv2.createTrackbar('Block Size', 'OCR Real-time Threshold Video', block_size, 255, update_and_save)
cv2.createTrackbar('C', 'OCR Real-time Threshold Video', c, 100, update_and_save)
cv2.createTrackbar('Blur Kernel Size', 'OCR Real-time Threshold Video', blur_kernel_size, 50, update_and_save)
cv2.createTrackbar('Morph Kernel Size', 'OCR Real-time Threshold Video', morph_kernel_size, 50, update_and_save)
cv2.createTrackbar('Threshold Type', 'OCR Real-time Threshold Video', threshold_type, 1, update_and_save)  # 0 for THRESH_BINARY, 1 for THRESH_BINARY_INV

# Function to remove noise from the image
def remove_noise(image, kernel_size):
    if kernel_size % 2 == 0:
        kernel_size += 1
    blurred = cv2.GaussianBlur(image, (kernel_size, kernel_size), 0)
    return blurred

# Function to apply morphological operations to the binary image
def apply_morphology(binary_image, kernel_size):
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (kernel_size, kernel_size))
    morphed = cv2.morphologyEx(binary_image, cv2.MORPH_CLOSE, kernel)
    return morphed

# Function to send OCR result to server via TCP/IP
def send_ocr_result(result):
    server_ip = "192.168.0.5"  # Replace with actual server IP
    server_port = 12345  # Replace with the actual port
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(5)  # Set a 5-second timeout for the socket connection
            s.connect((server_ip, server_port))
            s.sendall(result.encode())
            print(f"Sent OCR result to server: {result}")
    except (socket.timeout, socket.error) as e:
        print(f"Error: Could not send OCR result to server. {e}")

# Function to calculate average OCR result (stabilize readings)
def get_stabilized_text(history):
    text_counts = {}
    for text in history:
        text_counts[text] = text_counts.get(text, 0) + 1
    return max(text_counts, key=text_counts.get)  # Return the most frequent text

# OCR processing function that runs in a separate thread
def ocr_processing():
    global ocr_result
    while ocr_thread_running:
        if len(ocr_frame_queue) > 0:
            with ocr_thread_lock:
                frame = ocr_frame_queue.pop()  # Get the most recent frame
            ocr_result = process_image_for_ocr(frame)  # Perform OCR on the frame
        time.sleep(0.1)  # Small sleep to avoid CPU hogging

# Function to process the image and extract OCR results (this is done in the OCR thread)
def process_image_for_ocr(image):
    detected_text = ""

    # Get current positions of trackbars
    block_size = cv2.getTrackbarPos('Block Size', 'OCR Real-time Threshold Video')
    c = cv2.getTrackbarPos('C', 'OCR Real-time Threshold Video')
    blur_kernel_size = cv2.getTrackbarPos('Blur Kernel Size', 'OCR Real-time Threshold Video')
    morph_kernel_size = cv2.getTrackbarPos('Morph Kernel Size', 'OCR Real-time Threshold Video')
    threshold_type = cv2.getTrackbarPos('Threshold Type', 'OCR Real-time Threshold Video')

    # Ensure block_size is odd and greater than 1
    if block_size % 2 == 0:
        block_size += 1
    if block_size < 3:
        block_size = 3
    if morph_kernel_size < 1:
        morph_kernel_size = 1

    # Crop the image using loaded coordinates
    x1, y1, x2, y2 = crop_coords
    cropped = image[y1:y2, x1:x2]

    # Convert the cropped frame to grayscale
    gray = cv2.cvtColor(cropped, cv2.COLOR_BGR2GRAY)

    # Apply CLAHE to enhance the contrast
    clahe = cv2.createCLAHE(clipLimit=1.0, tileGridSize=(2, 2))  # Set CLAHE parameters
    equalized = clahe.apply(gray)  # Apply CLAHE to the grayscale image

    # Remove noise from the equalized image
    denoised = remove_noise(equalized, blur_kernel_size)

    # Apply adaptive thresholding to preprocess the image
    threshold_method = cv2.THRESH_BINARY if threshold_type == 0 else cv2.THRESH_BINARY_INV
    thresh = cv2.adaptiveThreshold(denoised, 255, cv2.ADAPTIVE_THRESH_MEAN_C, threshold_method, block_size, c)

    # Apply morphological operations to the binary image
    morphed = apply_morphology(thresh, morph_kernel_size)

    # Perform OCR with a whitelist for digits and specific uppercase letters
    custom_config = r'--oem 3 --psm 6 -c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    ocr_result = pytesseract.image_to_string(morphed, config=custom_config)

    # Remove any extra characters or spaces
    detected_text = ''.join(filter(str.isalnum, ocr_result))

    return detected_text

def main():
    global plc_trigger_received, ocr_thread_running
    detected_text = ""

    # Start PLC trigger listener in a separate thread
    plc_thread = threading.Thread(target=plc_server, daemon=True)
    plc_thread.start()

    # Start OCR processing thread
    ocr_thread_running = True
    ocr_thread = threading.Thread(target=ocr_processing, daemon=True)
    ocr_thread.start()

    frame_counter = 0  # To track frames and process OCR every Nth frame
    process_every_n_frames = 10  # Adjust this to control OCR frequency (e.g., OCR every 10 frames)

    try:
        if real_time_mode:
            while True:
                ret, frame = cap.read()
                if not ret:
                    break

                # Real-time display of the frame (without OCR)
                cv2.imshow('OCR Real-time Threshold Video', frame)

                # Perform OCR on every Nth frame
                frame_counter += 1
                if frame_counter % process_every_n_frames == 0:
                    with ocr_thread_lock:
                        ocr_frame_queue.append(frame.copy())  # Add the frame to the OCR queue

                # Capture result when 'c' is pressed
                if cv2.waitKey(1) & 0xFF == ord('c'):
                    print(f"OCR Capture: {ocr_result}")
                    if ocr_result:
                        send_ocr_result(ocr_result)

                # Trigger from PLC signal
                if plc_trigger_received:
                    print(f"PLC-triggered OCR Capture: {ocr_result}")
                    if ocr_result:
                        send_ocr_result(ocr_result)
                    plc_trigger_received = False  # Reset the PLC trigger flag

                # Break the loop on 'q' key press
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

        else:
            if os.path.exists(image_path):
                image = cv2.imread(image_path)
                while True:
                    detected_text = process_image(image)

                    # Capture result when 'c' is pressed
                    if cv2.waitKey(1) & 0xFF == ord('c'):
                        print(f"OCR Capture: {detected_text}")
                        if detected_text:
                            send_ocr_result(detected_text)

                    # Break the loop on 'q' key press
                    if cv2.waitKey(1) & 0xFF == ord('q'):
                        break

                # After the loop exits, ensure final parameters are saved
                save_parameters()
            else:
                print("Image file not found.")

    finally:
        # Stop the OCR thread
        ocr_thread_running = False
        ocr_thread.join()

        # Release resources even if an error occurs
        if real_time_mode and cap.isOpened():
            cap.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
